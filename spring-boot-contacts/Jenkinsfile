node {
  
    def projectPath = "spring-boot-contacts/"
    def EC2_HOST = "ubuntu@13.232.213.70"
    stage ("SCM Checkout") {
    	 checkout scm
         //git branch: 'release-war', 
         //url: 'https://github.com/sujnanarai/java-spring-boot-contacts.git'
    }
    stage('Packaging') {				
		dir(projectPath) {
			sh 'mvn clean package' 	
		}				
	}
	 
	//Build docker image
	stage ('Build docker image') {
	    dir(projectPath) {
	        sh 'docker build -t sujnanarai/spring-boot-contacts:1.0.0 .'
	    }
	}
	//login to docker hub and push image to docker hub
	stage ('Push docker image') {
	    withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB_CRED', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            sh "docker login -u ${USERNAME} -p ${PASSWORD}"
	    }
	    dir(projectPath) {
	        sh 'docker push sujnanarai/spring-boot-contacts:1.0.0'
	    }
	}
	stage('Publish test results') {			
		dir(projectPath) {
			step([$class: 'JUnitResultArchiver', testResults: 'target/surefire-reports/TEST-*.xml'])
			publishHTML([allowMissing: true, 
						alwaysLinkToLastBuild: false,
						keepAll: true, 
						reportDir: 'target/site/jacoco/', 
						reportFiles: 'index.html', 
						reportName: 'Code Coverage Report', 
						reportTitles: ''])
		}
			
	}
	stage('Archival') {			
		dir(projectPath) {
			archiveArtifacts artifacts: 'target/*.war', onlyIfSuccessful: true
		}			
	} 
	
	//Connects to remote EC2 and run docker image. The docker is already installed in that EC2 instance
	stage ('Run docker container') {
	    def dockerRun = 'docker run -p 8080:8080 -d --name sprning-contacts sujnanarai/spring-boot-contacts:1.0.0'
	    sshagent(['EC2_CREDENTIAL']) {
            sh "ssh -o StrictHostKeyChecking=no -T ${EC2_HOST} ${dockerRun}"
        }
	    
	}
}


